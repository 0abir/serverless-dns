name: Profiler

on:
  push:
    branches:
      - 'main'
    paths:
      - './src/**'

  workflow_dispatch:
    inputs:
      git-ref:
        description: "git tip: branch/ref/tag"
        required: false
        default: 'main'
      # docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#onworkflow_dispatchinputs
      js-runtime:
        description: "proc: deno/node"
        required: false
        default: 'node'
        type: choice
        options:
        - node
        - deno
      maxtime:
        description: "run time (in seconds)"
        required: false
        default: '60s'

env:
  GIT_REF: ${{ github.event.inputs.git-ref || github.ref }}
  JS_RUNTIME: 'node'
  MAXTIME_SEC: '60s'
  NODE_VER: '17.x'
  QDOH: 'q'

jobs:
  deploy:
    name: Setup
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          ref: ${{ env.GIT_REF }}
      - run: |
          echo "GIT_HEAD=$(git rev-parse HEAD)" >> $GITHUB_ENV

      # docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs-or-python
      - name: Setup Node
        if: env.JS_RUNTIME == 'node'
        uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VER }}

      # deno.land/#installation
      - name: Setup Deno @latest
        if: env.JS_RUNTIME == 'deno'
        run: |
          echo "::notice::deno install unsafe"
          curl -fsSL https://deno.land/install.sh | sh
        shell: bash

      - name: Deps
        run: npm ci
      - run: npm run build --if-present

      # github.com/natesales/repo
      # docs.github.com/en/actions/using-github-hosted-runners/customizing-github-hosted-runners#installing-software-on-ubuntu-runners
      - name: Setup Q
        run: |
          sudo echo "deb [trusted=yes] https://repo.natesales.net/apt /" > /etc/apt/sources.list.d/natesales.list
          sudo apt update
          sudo apt install q

      - name: Run profiler
        if: success()
        run: |
          timeout "$MAXTIME_SEC" ./run "$JS_RUNTIME" p1
        shell: bash
        # docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#example-using-a-fallback-value
        env:
          JS_RUNTIME: ${{ github.event.inputs.js-runtime || env.JS_RUNTIME }}
          MAXTIME_SEC: ${{ github.event.inputs.maxtime || env.MAXTIME_SEC }}
